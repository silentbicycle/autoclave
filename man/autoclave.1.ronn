autoclave: a pressure cooker for programs
=========================================

## SYNOPSIS

autoclave [-h] [-c <count>] [-l] [-e] [-f <max_failures>]
          [-i <id_str>] [-o <output_prefix>] [-r <max_runs>]
          [-s] [-t <timeout_sec>] [-v] [-w <wait_msec>]
          [-x <cmd>] <command line>

## DESCRIPTION

autoclave repeatedly executes a command line until its process exits
with a non-zero status, is stopped/terminated by a signal, a
user-specified timeout (-t) occurs, or a user-specified number of runs
(-r) have passed without any failures.

It can log the contents of stdout (-l) and/or stderr (-e), and can
rotate the log files so a fixed number of logs are kept (-c). If running
in verbose (-v) mode, a timestamp and run/failure counts will be
printed. (Supervise (-s) is an abbreviation for `-l -e -v`.) autoclave
can also replace a string in the program's arguments with the current
run ID (-i).

On failure, a handler program (-x) can be called with information about
the child process in environment variables. That way, a debugger can be
opened if the stressed program times out or dumps core. This program
must be in the path.


## OPTIONS

  * `-h`:
    Print a usage summary and exit.

  * `-c COUNT`:
    If using logging, only keep logs for the COUNT most recent runs.
    (If both stdout and stderr are logged, there will be 2 * COUNT
    logs.) By default, log rotation is off.

  * `-l`:
    Log stdout. Defaults to false. Log output paths default to
    `PROG_PATH/PROG_NAME.RUN_ID.stdout.log`.

  * `-e`:
    Log stderr. Defaults to false.

  * `-f FAILURES`:
    Run for multiple failures, rather than exiting after the first.

  * `-i STRING`:
    Anywhere STRING appears as a complete string in the command line,
    replace it with the current run ID.

  * `-o`:
    Set the output prefix for logs. Defaults to the first part of the
    command line given to autoclave (the process's `ARGV[0]`).

  * `-r MAX_RUNS`:
    If MAX_RUNS executions of the command line complete without any failures,
    then terminate autoclave with a return value of `EXIT_SUCCESS`.

  * `-s`:
    Supervise - An abbreviation for `-l -e -v`, which are often used together.

  * `-t SECONDS`:
    If any individual execution of the command line takes longer than
    SECONDS to complete (perhaps due to a deadlock), consider it
    a failure. If an error handler is provided with `-x`, call it,
    otherwise kill(2) the child process ID.

  * `-v`:
    Increase verbosity.

  * `-w MILLISECONDS`:
    Wait MILLISECONDS between executing the command line each time.
    Defaults to 100.

  * `-x CMD`:
    If a failure occurs, run CMD. See ENVIRONMENT.


## ENVIRONMENT

The failure handler will be called with the following environment
variables defined:

  * `AUTOCLAVE_CHILD_PID`:
    The process ID of the child process.

  * `AUTOCLAVE_RUN_ID`:
    The number of the current run (1st, 3rd, etc.).

  * `AUTOCLAVE_FAIL_TYPE`:
    The general failure cause: "timeout", "exit", "term", "stop".

  * `AUTOCLAVE_DUMPED_CORE`:
    Whether the child process dumped core. "1" or "0".

  * `AUTOCLAVE_EXIT_STATUS`:
    The exit status of the child process, if it exited.

  * `AUTOCLAVE_TERM_SIGNAL`:
    The signal that terminated the child process, if any.

  * `AUTOCLAVE_STOP_SIGNAL`:
    The signal that caused the child process to stop, if any.

  * `AUTOCLAVE_STDOUT_LOG`:
    The current stdout log file, if any.

  * `AUTOCLAVE_STDERR_LOG`:
    The current stderr log file, if any.


## EXIT STATUS

Returns 0 if the maximum number of runs (-r) executed without any
failures, or 1 otherwise.


## EXAMPLES

Repeatedly run buggy_program until it crashes:

    $ autoclave buggy_program

Same, but print run and failure counts:

    $ autoclave -v buggy_program

Same, but if it succeeds 10 times, return EXIT_SUCCESS, and
wait 500 milliseconds between runs:

    $ autoclave -v -r 10 -w 500 buggy_program

Repeatedly run buggy_program, logging stdout to
`buggy_program.1.stdout.log`, `buggy_program.2.stdout.log`, and so on:

    $ autoclave -l buggy_program

Same, but log to `/tmp/buggy.ID.stdout.log` instead:

    $ autoclave -l -o /tmp/buggy buggy_program

Log, but only keep the 5 most recent log files:

    $ autoclave -l -c 5 buggy_program

Same, but log stderr as well as stdout (keeping 10 files):

    $ autoclave -l -e -c 5 buggy_program

Repeatedly run buggy_program with the run ID as ARGV[2]:

    $ autoclave -i % buggy_program --seed %

Repeatedly run buggy_program until it has failed 10 times:

    $ autoclave -f 10 buggy_program

Run a program that occasionally deadlocks, halting it and counting it as a
failure if it takes more than 10 seconds to complete:

    $ autoclave -t 10  examples/deadlock_example

Same, but run the script `examples/gdb_it` when it times out, so gdb can
attach to the stopped process and investigate what is deadlocking.
(Note: the process is not halted after the -x command returns.)

    $ autoclave -t 10 -x examples/gdb_it examples/deadlock_example

Run `examples/crash_example`, calling `examples/gdb_it` if it fails:

    $ autoclave -x examples/gdb_it examples/crash_example


## BUGS

All monitoring is based on the child process directly created by forking
and execve-ing the command, so if the command is just a wrapper script
for another program (and it forgets to use `exec`), the results may be
incomplete.

There may be race conditions in the child process error handling logic.

Log rotation does not delete failure logs.


## COPYRIGHT

`autoclave` is Copyright (C) 2015-18 Scott Vokes <vokes.s@gmail.com>.


## SEE ALSO

gdb(1), core(5), [radamsa(1)](https://gitlab.com/akihe/radamsa)
